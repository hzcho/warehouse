// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// FileStorage is an autogenerated mock type for the FileStorage type
type FileStorage struct {
	mock.Mock
}

// AbsPath provides a mock function with given fields:
func (_m *FileStorage) AbsPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AbsPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeleteFile provides a mock function with given fields: ctx, fileName
func (_m *FileStorage) DeleteFile(ctx context.Context, fileName string) error {
	ret := _m.Called(ctx, fileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFile provides a mock function with given fields: ctx, fileName
func (_m *FileStorage) GetFile(ctx context.Context, fileName string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExists provides a mock function with given fields: fileName
func (_m *FileStorage) IsExists(fileName string) (bool, error) {
	ret := _m.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for IsExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(fileName)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFile provides a mock function with given fields: ctx, fileName, file
func (_m *FileStorage) SaveFile(ctx context.Context, fileName string, file io.Reader) error {
	ret := _m.Called(ctx, fileName, file)

	if len(ret) == 0 {
		panic("no return value specified for SaveFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) error); ok {
		r0 = rf(ctx, fileName, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFileStorage creates a new instance of FileStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileStorage {
	mock := &FileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
